from __future__ import annotations
from dataclasses import dataclass
import typing as tp
from typing import overload
from typing_extensions import Self
from ._gl_common import double, uint
if tp.TYPE_CHECKING:
    from ._gl_vec import gvec2, gvec3, gvec4
_TNumber = tp.TypeVar('_TNumber', float, double)
_UItem = int | float | uint | double | bool
_MItems: tp.TypeAlias = _UItem | 'gvec2' | 'gvec3' | 'gvec4'
_Never = tp.NoReturn


@dataclass
class gmat2x2(tp.Generic[_TNumber]):
    @overload
    def __init__(self, arg: _MItems, *args: _MItems): ...
    @overload
    def __init__(self, arg: gmat2x2, *args: _Never): ...
    def __init__(self, arg: tp.Any, *args: tp.Any): ...
    def __getitem__(self, index: int) -> 'gvec2'[_TNumber]: ...
    def __setitem__(self, index: int, value: 'gvec2'[_TNumber]): ...
    def length(self) -> int: ...
    def __add__(self, other: Self) -> Self: ...
    def __sub__(self, other: Self) -> Self: ...
    @overload
    def __mul__(self, other: gmat2x2[_TNumber]) -> gmat2x2[_TNumber]: ...
    @overload
    def __mul__(self, other: gmat3x2[_TNumber]) -> gmat3x2[_TNumber]: ...
    @overload
    def __mul__(self, other: gmat4x2[_TNumber]) -> gmat4x2[_TNumber]: ...
    @overload
    def __mul__(self, other: 'gvec2'[_TNumber]) -> 'gvec2'[_TNumber]: ...
    def __mul__(self, other: tp.Any) -> tp.Any: ...
    @overload
    def __rmul__(self, other: gmat2x2[_TNumber]) -> gmat2x2[_TNumber]: ...
    @overload
    def __rmul__(self, other: gmat2x3[_TNumber]) -> gmat2x3[_TNumber]: ...
    @overload
    def __rmul__(self, other: gmat2x4[_TNumber]) -> gmat2x4[_TNumber]: ...
    @overload
    def __rmul__(self, other: 'gvec2'[_TNumber]) -> 'gvec2'[_TNumber]: ...
    def __rmul__(self, other: tp.Any) -> tp.Any: ...
    def __truediv__(self, other: Self) -> Self: ...


@dataclass
class gmat2x3(tp.Generic[_TNumber]):
    @overload
    def __init__(self, arg: _MItems, *args: _MItems): ...
    @overload
    def __init__(self, arg: gmat2x3, *args: _Never): ...
    def __init__(self, arg: tp.Any, *args: tp.Any): ...
    def __getitem__(self, index: int) -> 'gvec3'[_TNumber]: ...
    def __setitem__(self, index: int, value: 'gvec3'[_TNumber]): ...
    def length(self) -> int: ...
    def __add__(self, other: Self) -> Self: ...
    def __sub__(self, other: Self) -> Self: ...
    @overload
    def __mul__(self, other: gmat2x2[_TNumber]) -> gmat2x3[_TNumber]: ...
    @overload
    def __mul__(self, other: gmat3x2[_TNumber]) -> gmat3x3[_TNumber]: ...
    @overload
    def __mul__(self, other: gmat4x2[_TNumber]) -> gmat4x3[_TNumber]: ...
    @overload
    def __mul__(self, other: 'gvec2'[_TNumber]) -> 'gvec2'[_TNumber]: ...
    def __mul__(self, other: tp.Any) -> tp.Any: ...
    @overload
    def __rmul__(self, other: gmat3x2[_TNumber]) -> gmat2x2[_TNumber]: ...
    @overload
    def __rmul__(self, other: gmat3x3[_TNumber]) -> gmat2x3[_TNumber]: ...
    @overload
    def __rmul__(self, other: gmat3x4[_TNumber]) -> gmat2x4[_TNumber]: ...
    @overload
    def __rmul__(self, other: 'gvec3'[_TNumber]) -> 'gvec3'[_TNumber]: ...
    def __rmul__(self, other: tp.Any) -> tp.Any: ...
    def __truediv__(self, other: Self) -> Self: ...


@dataclass
class gmat2x4(tp.Generic[_TNumber]):
    @overload
    def __init__(self, arg: _MItems, *args: _MItems): ...
    @overload
    def __init__(self, arg: gmat2x4, *args: _Never): ...
    def __init__(self, arg: tp.Any, *args: tp.Any): ...
    def __getitem__(self, index: int) -> 'gvec4'[_TNumber]: ...
    def __setitem__(self, index: int, value: 'gvec4'[_TNumber]): ...
    def length(self) -> int: ...
    def __add__(self, other: Self) -> Self: ...
    def __sub__(self, other: Self) -> Self: ...
    @overload
    def __mul__(self, other: gmat2x2[_TNumber]) -> gmat2x4[_TNumber]: ...
    @overload
    def __mul__(self, other: gmat3x2[_TNumber]) -> gmat3x4[_TNumber]: ...
    @overload
    def __mul__(self, other: gmat4x2[_TNumber]) -> gmat4x4[_TNumber]: ...
    @overload
    def __mul__(self, other: 'gvec2'[_TNumber]) -> 'gvec2'[_TNumber]: ...
    def __mul__(self, other: tp.Any) -> tp.Any: ...
    @overload
    def __rmul__(self, other: gmat4x2[_TNumber]) -> gmat2x2[_TNumber]: ...
    @overload
    def __rmul__(self, other: gmat4x3[_TNumber]) -> gmat2x3[_TNumber]: ...
    @overload
    def __rmul__(self, other: gmat4x4[_TNumber]) -> gmat2x4[_TNumber]: ...
    @overload
    def __rmul__(self, other: 'gvec4'[_TNumber]) -> 'gvec4'[_TNumber]: ...
    def __rmul__(self, other: tp.Any) -> tp.Any: ...
    def __truediv__(self, other: Self) -> Self: ...


@dataclass
class gmat3x2(tp.Generic[_TNumber]):
    @overload
    def __init__(self, arg: _MItems, *args: _MItems): ...
    @overload
    def __init__(self, arg: gmat3x2, *args: _Never): ...
    def __init__(self, arg: tp.Any, *args: tp.Any): ...
    def __getitem__(self, index: int) -> 'gvec2'[_TNumber]: ...
    def __setitem__(self, index: int, value: 'gvec2'[_TNumber]): ...
    def length(self) -> int: ...
    def __add__(self, other: Self) -> Self: ...
    def __sub__(self, other: Self) -> Self: ...
    @overload
    def __mul__(self, other: gmat2x3[_TNumber]) -> gmat2x2[_TNumber]: ...
    @overload
    def __mul__(self, other: gmat3x3[_TNumber]) -> gmat3x2[_TNumber]: ...
    @overload
    def __mul__(self, other: gmat4x3[_TNumber]) -> gmat4x2[_TNumber]: ...
    @overload
    def __mul__(self, other: 'gvec3'[_TNumber]) -> 'gvec3'[_TNumber]: ...
    def __mul__(self, other: tp.Any) -> tp.Any: ...
    @overload
    def __rmul__(self, other: gmat2x2[_TNumber]) -> gmat3x2[_TNumber]: ...
    @overload
    def __rmul__(self, other: gmat2x3[_TNumber]) -> gmat3x3[_TNumber]: ...
    @overload
    def __rmul__(self, other: gmat2x4[_TNumber]) -> gmat3x4[_TNumber]: ...
    @overload
    def __rmul__(self, other: 'gvec2'[_TNumber]) -> 'gvec2'[_TNumber]: ...
    def __rmul__(self, other: tp.Any) -> tp.Any: ...
    def __truediv__(self, other: Self) -> Self: ...


@dataclass
class gmat3x3(tp.Generic[_TNumber]):
    @overload
    def __init__(self, arg: _MItems, *args: _MItems): ...
    @overload
    def __init__(self, arg: gmat3x3, *args: _Never): ...
    def __init__(self, arg: tp.Any, *args: tp.Any): ...
    def __getitem__(self, index: int) -> 'gvec3'[_TNumber]: ...
    def __setitem__(self, index: int, value: 'gvec3'[_TNumber]): ...
    def length(self) -> int: ...
    def __add__(self, other: Self) -> Self: ...
    def __sub__(self, other: Self) -> Self: ...
    @overload
    def __mul__(self, other: gmat2x3[_TNumber]) -> gmat2x3[_TNumber]: ...
    @overload
    def __mul__(self, other: gmat3x3[_TNumber]) -> gmat3x3[_TNumber]: ...
    @overload
    def __mul__(self, other: gmat4x3[_TNumber]) -> gmat4x3[_TNumber]: ...
    @overload
    def __mul__(self, other: 'gvec3'[_TNumber]) -> 'gvec3'[_TNumber]: ...
    def __mul__(self, other: tp.Any) -> tp.Any: ...
    @overload
    def __rmul__(self, other: gmat3x2[_TNumber]) -> gmat3x2[_TNumber]: ...
    @overload
    def __rmul__(self, other: gmat3x3[_TNumber]) -> gmat3x3[_TNumber]: ...
    @overload
    def __rmul__(self, other: gmat3x4[_TNumber]) -> gmat3x4[_TNumber]: ...
    @overload
    def __rmul__(self, other: 'gvec3'[_TNumber]) -> 'gvec3'[_TNumber]: ...
    def __rmul__(self, other: tp.Any) -> tp.Any: ...
    def __truediv__(self, other: Self) -> Self: ...


@dataclass
class gmat3x4(tp.Generic[_TNumber]):
    @overload
    def __init__(self, arg: _MItems, *args: _MItems): ...
    @overload
    def __init__(self, arg: gmat3x4, *args: _Never): ...
    def __init__(self, arg: tp.Any, *args: tp.Any): ...
    def __getitem__(self, index: int) -> 'gvec4'[_TNumber]: ...
    def __setitem__(self, index: int, value: 'gvec4'[_TNumber]): ...
    def length(self) -> int: ...
    def __add__(self, other: Self) -> Self: ...
    def __sub__(self, other: Self) -> Self: ...
    @overload
    def __mul__(self, other: gmat2x3[_TNumber]) -> gmat2x4[_TNumber]: ...
    @overload
    def __mul__(self, other: gmat3x3[_TNumber]) -> gmat3x4[_TNumber]: ...
    @overload
    def __mul__(self, other: gmat4x3[_TNumber]) -> gmat4x4[_TNumber]: ...
    @overload
    def __mul__(self, other: 'gvec3'[_TNumber]) -> 'gvec3'[_TNumber]: ...
    def __mul__(self, other: tp.Any) -> tp.Any: ...
    @overload
    def __rmul__(self, other: gmat4x2[_TNumber]) -> gmat3x2[_TNumber]: ...
    @overload
    def __rmul__(self, other: gmat4x3[_TNumber]) -> gmat3x3[_TNumber]: ...
    @overload
    def __rmul__(self, other: gmat4x4[_TNumber]) -> gmat3x4[_TNumber]: ...
    @overload
    def __rmul__(self, other: 'gvec4'[_TNumber]) -> 'gvec4'[_TNumber]: ...
    def __rmul__(self, other: tp.Any) -> tp.Any: ...
    def __truediv__(self, other: Self) -> Self: ...


@dataclass
class gmat4x2(tp.Generic[_TNumber]):
    @overload
    def __init__(self, arg: _MItems, *args: _MItems): ...
    @overload
    def __init__(self, arg: gmat4x2, *args: _Never): ...
    def __init__(self, arg: tp.Any, *args: tp.Any): ...
    def __getitem__(self, index: int) -> 'gvec2'[_TNumber]: ...
    def __setitem__(self, index: int, value: 'gvec2'[_TNumber]): ...
    def length(self) -> int: ...
    def __add__(self, other: Self) -> Self: ...
    def __sub__(self, other: Self) -> Self: ...
    @overload
    def __mul__(self, other: gmat2x4[_TNumber]) -> gmat2x2[_TNumber]: ...
    @overload
    def __mul__(self, other: gmat3x4[_TNumber]) -> gmat3x2[_TNumber]: ...
    @overload
    def __mul__(self, other: gmat4x4[_TNumber]) -> gmat4x2[_TNumber]: ...
    @overload
    def __mul__(self, other: 'gvec4'[_TNumber]) -> 'gvec4'[_TNumber]: ...
    def __mul__(self, other: tp.Any) -> tp.Any: ...
    @overload
    def __rmul__(self, other: gmat2x2[_TNumber]) -> gmat4x2[_TNumber]: ...
    @overload
    def __rmul__(self, other: gmat2x3[_TNumber]) -> gmat4x3[_TNumber]: ...
    @overload
    def __rmul__(self, other: gmat2x4[_TNumber]) -> gmat4x4[_TNumber]: ...
    @overload
    def __rmul__(self, other: 'gvec2'[_TNumber]) -> 'gvec2'[_TNumber]: ...
    def __rmul__(self, other: tp.Any) -> tp.Any: ...
    def __truediv__(self, other: Self) -> Self: ...


@dataclass
class gmat4x3(tp.Generic[_TNumber]):
    @overload
    def __init__(self, arg: _MItems, *args: _MItems): ...
    @overload
    def __init__(self, arg: gmat4x3, *args: _Never): ...
    def __init__(self, arg: tp.Any, *args: tp.Any): ...
    def __getitem__(self, index: int) -> 'gvec3'[_TNumber]: ...
    def __setitem__(self, index: int, value: 'gvec3'[_TNumber]): ...
    def length(self) -> int: ...
    def __add__(self, other: Self) -> Self: ...
    def __sub__(self, other: Self) -> Self: ...
    @overload
    def __mul__(self, other: gmat2x4[_TNumber]) -> gmat2x3[_TNumber]: ...
    @overload
    def __mul__(self, other: gmat3x4[_TNumber]) -> gmat3x3[_TNumber]: ...
    @overload
    def __mul__(self, other: gmat4x4[_TNumber]) -> gmat4x3[_TNumber]: ...
    @overload
    def __mul__(self, other: 'gvec4'[_TNumber]) -> 'gvec4'[_TNumber]: ...
    def __mul__(self, other: tp.Any) -> tp.Any: ...
    @overload
    def __rmul__(self, other: gmat3x2[_TNumber]) -> gmat4x2[_TNumber]: ...
    @overload
    def __rmul__(self, other: gmat3x3[_TNumber]) -> gmat4x3[_TNumber]: ...
    @overload
    def __rmul__(self, other: gmat3x4[_TNumber]) -> gmat4x4[_TNumber]: ...
    @overload
    def __rmul__(self, other: 'gvec3'[_TNumber]) -> 'gvec3'[_TNumber]: ...
    def __rmul__(self, other: tp.Any) -> tp.Any: ...
    def __truediv__(self, other: Self) -> Self: ...


@dataclass
class gmat4x4(tp.Generic[_TNumber]):
    @overload
    def __init__(self, arg: _MItems, *args: _MItems): ...
    @overload
    def __init__(self, arg: gmat4x4, *args: _Never): ...
    def __init__(self, arg: tp.Any, *args: tp.Any): ...
    def __getitem__(self, index: int) -> 'gvec4'[_TNumber]: ...
    def __setitem__(self, index: int, value: 'gvec4'[_TNumber]): ...
    def length(self) -> int: ...
    def __add__(self, other: Self) -> Self: ...
    def __sub__(self, other: Self) -> Self: ...
    @overload
    def __mul__(self, other: gmat2x4[_TNumber]) -> gmat2x4[_TNumber]: ...
    @overload
    def __mul__(self, other: gmat3x4[_TNumber]) -> gmat3x4[_TNumber]: ...
    @overload
    def __mul__(self, other: gmat4x4[_TNumber]) -> gmat4x4[_TNumber]: ...
    @overload
    def __mul__(self, other: 'gvec4'[_TNumber]) -> 'gvec4'[_TNumber]: ...
    def __mul__(self, other: tp.Any) -> tp.Any: ...
    @overload
    def __rmul__(self, other: gmat4x2[_TNumber]) -> gmat4x2[_TNumber]: ...
    @overload
    def __rmul__(self, other: gmat4x3[_TNumber]) -> gmat4x3[_TNumber]: ...
    @overload
    def __rmul__(self, other: gmat4x4[_TNumber]) -> gmat4x4[_TNumber]: ...
    @overload
    def __rmul__(self, other: 'gvec4'[_TNumber]) -> 'gvec4'[_TNumber]: ...
    def __rmul__(self, other: tp.Any) -> tp.Any: ...
    def __truediv__(self, other: Self) -> Self: ...


mat2x2 = gmat2x2[float]
dmat2x2 = gmat2x2[double]
mat2 = gmat2x2[float]
dmat2 = gmat2x2[double]
mat2x3 = gmat2x3[float]
dmat2x3 = gmat2x3[double]
mat2x4 = gmat2x4[float]
dmat2x4 = gmat2x4[double]
mat3x2 = gmat3x2[float]
dmat3x2 = gmat3x2[double]
mat3x3 = gmat3x3[float]
dmat3x3 = gmat3x3[double]
mat3 = gmat3x3[float]
dmat3 = gmat3x3[double]
mat3x4 = gmat3x4[float]
dmat3x4 = gmat3x4[double]
mat4x2 = gmat4x2[float]
dmat4x2 = gmat4x2[double]
mat4x3 = gmat4x3[float]
dmat4x3 = gmat4x3[double]
mat4x4 = gmat4x4[float]
dmat4x4 = gmat4x4[double]
mat4 = gmat4x4[float]
dmat4 = gmat4x4[double]
